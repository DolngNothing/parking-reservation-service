plugins {
    id 'org.springframework.boot' version '2.3.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

group = 'com.oocl'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE'
    compile group: 'org.flywaydb', name: 'flyway-core', version: '6.5.3'
    compile 'mysql:mysql-connector-java:6.0.6'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compile 'com.alibaba:fastjson:1.2.73'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-pool2
    compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.8.0'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    compile "com.google.zxing:core:3.4.0"
    compile "com.google.zxing:javase:3.4.0"
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.200'
}

configurations {
    mybatisGenerator
}

apply plugin: "jacoco"
jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacocoReport")
}

ext {
    excludeFile = [
            '**/repository/**',
            '**/model/**',
            '**/dto/**',
            '**/constants/**',
            '*/ParkingReservationServiceApplication.*',
            '**/config/**',
            '**/utils/**']
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: excludeFile)
        })
    }
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.8
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.8
            }
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.8
            }
        }

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['com.oocl.parkingreservationservice.*']
        }
    }
}

test {
    useJUnitPlatform()
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        html.enabled true
        csv.enabled false
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: excludeFile)
        })
    }
}

check.dependsOn jacocoTestCoverageVerification
